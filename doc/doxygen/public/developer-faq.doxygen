/**

 @page developer_faq Developer FAQ

 The following contains answers to typical questions from developers about OpenMS.

 @section general General

 @subsection new_to_openms I am new to OpenMS. What should I do first?
 <ul>
 <li>Check out the development version of OpenMS (see website).</li>
 <li>Build OpenMS by following the [installation instructions]() or [from source](../installations/build-openms-from-source.md).</li>
 <li>Read the @subpage coding_conventions coding conventions</li>
 <li>Read the [OpenMS Tutorial](../tutorials/user-tutorial.md)</li>
 <li>Create a GitHub account</li>
 <li>Subscribe to the <a href"https://sourceforge.net/projects/open-ms/lists/open-ms-general">open-ms-general</a> or [contact-us](../contact-us.md).</li>
 </ul>

 @subsection difference_between_tool_and_util What is the difference between an OpenMS tool and util?

 A tool starts its lifecycle in <code>UTILS</code> and may exist without being thoroughly tested. Tools may be promoted from <code>UTILS</code> to <code>TOOLS</code> if they are stable enough, are fully tested, fully documented, and a test workflow exists.

 @subsection written_class_for_openms I have written a class for OpenMS. What should I do?

 Follow the @subpage coding_conventions coding conventions.

 To summarize:
 <ul>
 <li>The coding style (brackets, variable names, etc.) must conform to the conventions.</li>
 <li>The class and all the members should be properly documented.</li>
 <li>Check your code with the tool  <code>tools/checker.php</code>. Call <code>php tools/checker.php</code> for detailed instructions.</li>
 </ul>

 Please open a pull request and follow the [pull request guidelines](pull-request-checklist.md).

 @subsection qt_designer_to_create_gui_widgets Can I use QT designer to create GUI widgets?

 Yes. Create a class called <code>Widget: Create .ui-File</code> with <code>QT designer</code> and store it as <code>Widget.ui.</code>. Add the class to
<code>sources.cmake</code>. From the <code>.ui-File</code> the file <code>include/OpenMS/VISUAL/UIC/ClassTemplate.h</code> is generated by the build system.

 @note Do not check in this file, as it is generated automatically when needed.

 Derive the class <code>Widget</code> from <code>WidgetTemplate</code>. For further details, see the <code>Widget.h</code> and <code>Widget.cpp</code> files.

 @subsection can_start_section_macro_handle_two_or_more_arguments Can the START_SECTION-macro not handle template methods that have two or more arguments?

 Insert round brackets around the method declaration.

 @subsection where_are_the_binary_installers_created Where are the binary installers created?

 View the binary installers at the <a href="https://abibuilder.informatik.uni-tuebingen.de/archive/openms/OpenMSInstaller/nightly/">build archive</a>.

 Please verify the creation date of the individual installers, as there may have been an error while creating the installer.

 @section troubleshooting Troubleshooting

 @subsection openms_complains_about_boost OpenMS complains about boost not being found.

 <code>CMake</code> got confused. Set up a new build directory and try again. If you build from source (not recommended), deleting the <code>CMakeCache.txt</code> and <code>cmake</code> directory might help.

 @section build_system Build system

 The following questions are related to the build system.

 @subsection what_is_cmake What is CMake?

 <code>CMake</code> builds build systems for different platforms, e.g. VisualStudio Solutions on Windows, Makefiles on Linux etc. This allows to define in one central location (namely <code>CMakeLists.txt</code>) how OpenMS is build and have the platform specific stuff handled by `CMake`.

 View the <a href="http://www.cmake.org">cmake website</a> for more information.

 @subsection how_to_use_cmake How to use CMake

 See Installation instructions for your platform.
 In general, call <code>CMake(.exe)</code> with some parameters to create the native build-system.

 @note When <code>ccmake</code> is mentioned in this document, substitute this with <code>CMake-GUI</code> if your operating system (OS) is Windows. Edit the <code>CMakeCache.txt</code> file directly.

 @subsection how_to_generate_a_build_system How to generate a build system

 Type <code>cmake</code> into a console. This will list the available code generators available on your platform; use them with
<code>CMake</code> using the <code>-G</code> option.

 @subsection what_are_user_definable_cmake_cache_variables What are user definable CMake cache variables?

 User definable <code>CMake</code> cache variables allow the user to pass options to <code>CMake</code> which will influence the build system. The most important option that should be given when calling <code>CMake.exe</code> is:

 <code>CMAKE_FIND_ROOT_PATH</code>, which is where <code>CMake</code> will search for additional libraries if they are not found in the default system paths. By default we add <code>OpenMS/contrib</code>.

 If you have installed all libraries on your system already, there is no need to change <code>CMAKE_FIND_ROOT_PATH</code>. For
 <code>contrib</code> libraries, set the variable <code>CMAKE_FIND_ROOT_PATH</code>.

 On Windows, the <code>contrib</code> folder is required, as there are no system developer packages. To pass this variable to
 <code>CMake</code> use the <code>-D</code> switch e.g. <code>cmake -D CMAKE_FIND_ROOT_PATH:PATH="D:\\somepath\\contrib"</code>.

 Everything else can be edited using <code>ccmake</code> afterwards.

 The following options are of interest:
 <ul>
 <li><code>CMAKE_BUILD_TYPE</code>: To build Debug or Release version of OpenMS. Release is the default</li>
 <li><code>CMAKE_FIND_ROOT_PATH</code>: The path to the <code>contrib</code> libraries.
 @note Provide more then one value here (e.g., <code>-D CMAKE_FIND_ROOT_PATH="/path/to/contrib;/usr/"</code> will search in your <code>contrib</code> path and in <code>/usr</code> for the required libraries).
 <li><code>STL_DEBUG</code>: Enables STL debug mode.</li>
 <li><code>DB_TEST</code> (deprecated): Enables database testing.</li>
 <li><code>QT_DB_PLUGIN</code> (deprecated): Defines the db plugin used by Qt.
 </ul>
 View the description for each option by calling <code>ccmake</code>.

 @subsection can_i_use_another_solver Can I use another solver other than GLPK?

 Other solvers can be used, but by default, the build system only links to GLPK (this is how OpenMS binary packages must
 be built). To to use another solver, use <code>cmake ... -D USE_COINOR=1 ....</code> and refer to the documentation of the
 <code>LPWrapper</code> class.

 @subsection how_to_switch_to_debug_or_release_config How do I switch to debug or release configuration?

 For Makefile generators (typically on Linux), set the <code>CMAKE_BUILD_TYPE</code. variable to either Debug or Release by
 calling <code>ccmake</code>. For Visual Studio, this is not necessary as all configurations are generated and choose the one you like within the IDE itself. The <code>Debug</code> configuration enabled debug information. The <code>Release</code> configuration disables debug information and enables optimisation.

 @subsection changed_contrib_path I changed the `contrib` path, but re-running `CMake` won't change the library paths?

 Once a library is found and its location is stored in a cache variable, it will only be searched again if the
 corresponding entry in the cache file is set to false.

 @warning If you delete the `CMakeCache.txt`, all other custom settings will be lost.

 The most useful targets will be shown to you by calling the targets target, i.e. make targets.

 @subsection cmake_cant_find_qt_library CMake can't seem to find a Qt library (usually QtCore).

 <code>CMake</code> finds <code>QT</code> by looking for <code>qmake</code> in your <code>PATH</code> or for the Environment Variable <code>QTDIR</code>. Set these accordingly.

 Make sure there is no second installation of Qt (especially the MinGW version) in your local environment.
 @warning This might lead <code>CMake</code> to the wrong path (it's searching for the <code>Qt*.lib</code> files).
 You should only move or delete the offending <code>Qt</code> version if you know what you are doing.

 A save workaround is to edit the <code>CMakeCache</code> file (e.g. via <code>ccmake</code>) and set all paths relating to <code>QT</code> (e.g. <code>QT_LIBRARY_DIR</code>) manually.

 @subsection windows_what_version_of_visual_studio (Windows) What version of Visual Studio should I use?

 It is recommended to use the latest version. Get the latest <code>CMake</code>, as its generator needs to support your VS. If
 your VS is too new and there is no <code>CMake</code> for that yet, you're gonna be faced with a lot of conversion issues.
 This happens whenever the Build-System calls <code>CMake</code> (which can be quite often, e.g., after changes to <code>CMakeLists.txt</code>).

 @subsection how_to_add_a_new_class_to_build_system How to add a new class to build system

 <ol>
 <li>Create the new class in the corresponding sub-folder of the sub-project. The header has to be created in <code>src/<sub-project>/include/OpenMS</code> and the <code>.cpp</code> file in <code>src/<sub-project>/source</code>, e.g., <code>src/openms/include/OpenMS/FORMAT/NewFileFormat.h</code> and <code>src/openms/source/FORMAT/NewFileFormat.cpp</code>.</li>
 <li>Add both to the respective <code>sources.cmake</code> file in the same directory (e.g., <code>src/openms/source/FORMAT/</code> and <code>src/openms/include/OpenMS/FORMAT/</code>).</li>
 <li>Add the corresponding class test to <code>src/tests/class_tests/<sub-project>/</code> (e.g., <code>src/tests/class_tests/openms/source/NewFileFormat_test.cpp</code>).</li>
 <li>Add the test to the <code>executables.cmake</code> file in the test folder (e.g., <code>src/tests/class_tests/openms/executables.cmake</code>).</li>
 <li>Add them to git by using the command <code>git add</code>.</li>
 </ol>

 @subsection how_to_add_a_new_directory_to_the_build_system How to add a new directory to the build system

 <ol>
 <li>Create two new <code>sources.cmake</code> files (one for <code>src/<sub-project>/include/OpenMS/MYDIR</code>, one for <code>src/<sub-project>/source/MYDIR</code>), using existing <code>sources.cmake</code> files as template.</li>
 <li>Add the new <code>sources.cmake</code> files to <code>src/<sub-project>/includes.cmake</code>.</li>
 <li>If you created a new directory directly under <code>src/openms/source</code>, then have a look at <code>src/tests/class_tests/openms/executables.cmake</code>.</li>
 <li>Add a new section that makes the unit testing system aware of the new (upcoming) tests.</li>
 <li>Look at the very bottom and augment <code>TEST_executables</code>.</li>
 <li>Add a new group target to <code>src/tests/class_tests/openms/CMakeLists.txt</code>.</li>
 </ol>

 @subsection how_to_speed_up_the_compile_process How to speed up the compile process

 To speed up the compile process of OpenMS, use several threads. If you have several processors/cores, build OpenMS
 <code>classes/tests</code> and <code>TOPP</code> tools in several threads. On Linux, use the <code>make option -j: make -j8 OpenMS TOPP test_build</code>.

 On Windows, Visual Studio solution files are automatically build with the <code>/MP</code> flag, such that Visual Studio uses all available cores of the machine.

 @section continuous_integration Continuous integration

 @section testing Testing

 @section working_in_ides Working in IDEs

 @subsection why_there_are_no_source_test_and_source_app_topp_utils_folders Why are there no source/TEST and source/APPLICATIONS/TOPP|UTILS folder?

 All source files added to an IDE are associated with their targets. Find the source files for each test within
 its own subproject. The same is true for the <code>TOPP</code> and <code>UTILS</code> classes.

 @subsection im_getting_the_error_error_c2471 I'm getting the error "Error C2471: cannot update program database"

 This is a bug in Visual Studio and there is a <a href="http://code.msdn.microsoft.com/KB946040">bug fix</a>. Only apply it if you encounter the error. The bug fix might have unwanted side effects!

 @subsection visual_studio_cant_read_the_clang_format_file Visual Studio can't read the clang-format file.

 Depending on the Visual Studio version it might get an error like <code>Error while formating with ClangFormat</code>.
 This is because Visual Studio is using an outdated version of clang-format. Unfortunately there is no easy way to update
 this using Visual Studio itself. There is a plugin provided by LLVM designed to fix this problem, but the plugin doesn't
 work with every Visual Studio version. In that case, update clang-format manually using the pre-build clang-format binary.
 Both the binary and a link to the plugin can be found <a href="https://llvm.org/builds/">here</a>.
 To update clang-format download the binary and exchange it with the clang-format binary in your Visual Studio folder.
 For Visual Studio 17 and 19 it should be located at: <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\Llvm\bin</code>.

 @subsection the_indexer_gets_stuck_at_a_file_that_includes_seqan The indexer gets stuck at a file that includes the directive ``#includes seqan``

 It seems that SeqAn code is not compatible with older eclipse C++ indexers. You should upgrade to eclipse galileo
(CDT 6.0.x). Also, increase the available memory limit in <code>eclipse.ini</code>, e.g. <code>-Xmx1024m</code> for one gig.

 @subsection the_parser_is_confused The parser is confused after OPENMS_DLLAPI and does not recognize standard C++ headers

 Go to <b>Project</b> > <b>Properties</b> > <b>C/C++ Include Paths and Preprocessor Symbols</b> > <b>Add Preprocessor symbol -> "OPENMS_DLLAPI="</b>.
 This tells eclipse that the macro is defined empty. In the same dialog add an external include path to
 e.g. <code>/usr/include/c++/4.3.3/</code>, etc. The issue with C++ headers was fixed in the latest galileo release.

 Hints to resolve the <code>OPENMS_DLLAPI</code> issue using the <code>cmake</code> generator are welcome.

 @section debugging Debugging

 The following section provides information about how to debug your code.

 @subsection how_to_debug_uncaught_exceptions How to debug uncaught exceptions

 Dump a core if an uncaught exception occurs, by setting the environment variable <code>OPENMS_DUMP_CORE</code>.

 Each time an uncaught exception occurs, the <code>OPENMS_DUMP_CORE</code> variable is checked and a segmentation fault is caused, if it is set.

 @subsection why_is_no_core_dumped_although_a_fatal_error_occured (Linux) Why is no core dumped, although a fatal error occurred?

 The <code>ulimit -c</code> unlimited command. It sets the maximum size of a core to unlimited.

 @warning We observed that, on some systems, no core is dumped even if the size of the core file is set to unlimited. We are not sure what causes this problem.

 @subsection how_to_set_breakpoints (Linux) How to set breakpoints in gdb to debug OpenMS

 Imagine you want to debug the TOPPView application and you want it to stop at line 341 of <code>SpectrumMDIWindow.C</code>.

 <ol>
 <li>Enter the following in your terminal:</li>
 @code{sh}
  Run gdb:
 shell> gdb TOPPView
 @endcode
 <li>Start the application (and close it):</li>
 @code{sh}
 gdb> run [arguments]
 @endcode
 <li>Set the breakpoint:</li>
 @code{sh}
 gdb> break SpectrumMDIWindow.C:341
 @endcode
 <li>Start the application again (with the same arguments):</li>
 @code{sh}
 gdb> run
 @endcode
 </ol>

 @subsection how_to_find_out_which How to find out which shared libraries are used by an application

 Linux: Use <code>ldd</code>.

 Windows (Visual studio console): See <a href="http://www.dependencywalker.com/">Dependency Walker</a> (use x86 for 32 bit builds and the x64 version for 64bit builds. Using the wrong version of depends.exe will give the wrong results) or
 <code>dumpbin /DEPENDENTS OpenMS.dll</code>.

 @subsection how_to_get_a_list How to get a list of the symbols defined in a (shared) library or object file?

 Linux: Use <code>nm <library></code>.

 Use <code>nm -C</code> to switch on demangling of low-level symbols into their C++-equivalent names. <code>nm</code> also accepts <code>.a</code> and <code>.o</code> files.

 Windows (Visual studio console): Use <code>dumpbin /ALL <library></code>.

 Use dumpbin on object files (.o) or (shared) library files (.lib) or the DLL itself e.g. <code>dumpbin /EXPORTS OpenMS.dll</code>.

 @section cross_platform_thoughts Cross-platform thoughts

 OpenMS runs on three major platforms. Here are the most prominent causes of "it runs on Platform A, but not on B. What now?"

 @subsection reading_or_writing_binary_files Reading or writing binary files

 Reading or writing binary files causes different behaviour. Usually Linux does not make a difference between text-mode
 and binary-mode when reading files. This is quite different on Windows as some bytes are interpreted as <code>EOF</code>, which leadmight to a premature end of the reading process.

 If reading binary files, make sure that you explicitly state that the file is binary when opening it.

 During writing in text-mode on Windows a line-break (<code>\n</code>) is expanded to (<code>\r\n</code>). Keep this in mind or use the <code>eol-style</code> property of subversion to ensure that line endings are correctly checked out on non-Windows systems.

 @subsection paths_and_system_functions Paths and system functions

 Avoid hardcoding e.g.<code>String tmp_dir = "/tmp";</code>. This will fail on Windows. Use Qt's <code>QDir</code> to get a path to the systems temporary directory if required.

 Avoid names like uname which are only available on Linux.

 When working with files or directories, it is usually safe to use "/" on all platforms. Take care of spaces in directory
 names though. Quote paths if they are used in a system call to ensure that the subsequent interpreter takes the spaced path as a single entity.


 @section doxygen_documentation Doxygen documentation

 @subsection where_to_find_definition_of_main_page Where to find the definiton of the main page

 Find a definition of the main page <a href="https://github.com/OpenMS/OpenMS/edit/develop/doc/doxygen/public/Main.doxygen">here</a>.

 @subsection where_to_add_a_new_module Where to add a new module

 Add a new module <a href="https://github.com/OpenMS/OpenMS/edit/develop/doc/doxygen/public/Modules.doxygen">here</a>.

 @subsection how_is_the_parameter_documentation_derived How is the parameter documentation for classes derived from DefaultParamHandler created?

 Add your class to the program <code>OpenMS/doc/doxygen/parameters/DefaultParamHandlerDocumenter.cpp</code>. This program generates a html table with the parameters. This table can then be included in the class documentation using the following
 <code>doxygen</code> command:<code>@htmlinclude OpenMS_<class name>.parameters</code>.

 @note Parameter documentation is automatically generated for <code>TOPP/UTILS</code> included in the static <code>ToolHandler.cpp</code> tools list.

 To include TOPP/UTILS parameter documentation use following <code>doxygen</code> command:

 @code
 @htmlinclude TOPP_<tool name>.parameters
 @endcode

 or

 @code
 @htmlinclude UTILS_<tool name>.parameters
 @endcode

 Test if everything worked by calling <code>make doc_param_internal</code>. The parameters documentation is written to
 <code>OpenMS/doc/doxygen/parameters/output/</code>.

 @subsection how_is_the_command_line How is the command line documentation for TOPP/UTILS tools created?

 The program <code>OpenMS/doc/doxygen/parameters/TOPPDocumenter.cpp</code> creates the command line documentation for all classes that are included in the static <code>ToolHandler.cpp</code>s tools list. It can be included in the documentation using the following <code>doxygen</code> command:

 @code
 @verbinclude TOPP_<tool name>.cli
 @endcode

 Test if everything worked by calling <code>make doc_param_internal</code>. The command line documentation is written to
 <code>OpenMS/doc/doxygen/parameters/output/</code>.

 @section bugs_issues Bugs and issues

 @subsection how_to_contribute_to_a_bug_fix How to contribute a bug fix?

 Read [contributor quickstart guide](../guides/contributors-quickstart-guide.md).

 @subsection how_to_profile_code How to profile my code?

 IBM's profiler, available for all platforms (and free for academic use): Purify(Plus) and/or Quantify.

 Windows: this is directly supported by Visual Studio (Depending on the edition: Team and above). Follow their documentation.

 Linux:
 <ol>
 <li>Build OpenMS in debug mode (set <code>CMAKE_BUILD_TYPE</code> to <code>Debug</code>).</li>
 <li>Call the executable with valgrind: <code>valgrind –tool=callgrind</code>.</li>
 @warning Other processes running on the same machine can influence the profiling. Make sure your application gets enough
  resources (memory, CPU time).
 <li>Start and stop the profiling while the executable is running e.g. to skip initialization steps.</li>
 <li>Start <code>valgrind</code> with the option <code>–instr-atstart=no</code>.</li>
 <li>Call <code>callgrind -i [on|off]</code> to start/stop the profiling.</li>
 <li>The output can be viewed with <code>kcachegrind callgrind.out</code>.</li>
 </ol>

 @subsection linux_how_to_check_for_memory_leaks How to code for memory leaks

 <ol>
 <li>Build OpenMS in debug mode (set <code>CMAKE_BUILD_TYPE</code> to <code>Debug</code>).</li>
 <li>Call the executable with <code>valgrind: valgrind --suppressions=OpenMS/tools/valgrind/openms_external.supp –leak-check=full <executable> <parameters></code>.</li>
 </ol>

 Common errors are:
 <ul>
 <li><code>Invalid write/read ...</code> - Violation of container boundaries.</li>
 <li><code>... depends on uninitialized variable</code> - Uninitialized variables.</li>
 <li><code>... definitely lost</code> - Memory leak that has to be fixed.</li>
 <li><code>... possibly lost</code> - Possible memory leak, so have a look at the code.</li>
 </ul>

 For more information see the <a href="http://valgrind.org/docs/manual/"><code>valgrind</code> documentation</a>.

 @section release Release

 View <a href="https://github.com/OpenMS/OpenMS/wiki/Preparation-of-a-new-OpenMS-release#release_developer">preparation of a new OpenMS release</a> to learn more about contributing to releases.

 */
